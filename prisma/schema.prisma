// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE {
  CLIENT
  ADMIN
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  role       ROLE    @default(CLIENT)
  email      String
  firebaseId String
  posts      Place[]
  tags       Tag[]
}

model Tag {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @db.ObjectId
  Place    Place?  @relation(fields: [placeId], references: [id])
  placeId  String? @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime @default(now())
  reviewer  String
  review    String
  rating    Int
  Place     Place?   @relation(fields: [placeId], references: [id])
  placeId   String?  @db.ObjectId
  replies   Review[] @relation("ReviewHierarchy")
  Review    Review?  @relation("ReviewHierarchy", fields: [reviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviewId  String?  @db.ObjectId
}

model Expense {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  rate    String
  total   String
  Place   Place?  @relation(fields: [placeId], references: [id])
  placeId String? @db.ObjectId
}

model Stay {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  website  String?
  location Json
  landmark String
  contact  String
  manager  String
  Place    Place?  @relation(fields: [placeId], references: [id])
  placeId  String? @db.ObjectId
}

model Place {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  photos            String
  place             String
  description       String
  location          String
  longitiude        Float
  latitude          Float
  mode_of_travel    String
  stay              Stay[]
  tourist_locations Place[]   @relation("nearbyLocations")
  blog              String
  upvotes           Int
  downvotes         Int
  expense           Int
  Place             Place?    @relation("nearbyLocations", fields: [placeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  placeId           String?   @db.ObjectId
  author            User      @relation(fields: [authorId], references: [id])
  authorId          String    @db.ObjectId
  tags              Tag[]
  reviews           Review[]
  expenses          Expense[]
}
